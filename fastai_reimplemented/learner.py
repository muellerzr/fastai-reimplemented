# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_learner.ipynb.

# %% auto 0
__all__ = ['Learner']

# %% ../nbs/02_learner.ipynb 2
import torch
from typing import Union, List
from torch.optim import Optimizer
from .callback.core import Callback

# %% ../nbs/02_learner.ipynb 3
class Learner:
    """
    Groups together a model, a set of dataloaders, an optimizer, and 
    a loss function to handle training.
    """
    training = False

    def __init__(self, dls, model: torch.nn.Module, loss_function: callable, opt_function: Optimizer, learning_rate: float=0.001, callbacks: List[Callback]=[], metrics: callable=None):
        """
        Args:
            dls :
                A `DataLoaders` instance containing fastai or PyTorch `DataLoader`s
            model (torch.nn.Module):
                A PyTorch model for training or inference
            loss_function (callable):
                The loss function to use, defaults to the one attached in `dls`
            opt_function (Optimizer):
                Optimization function for training
            learning_rate (float):
                Default learning rate
            callbacks (List[Callback]):
                Additional `Callback`'s to be tied to the `Learner` directly
            metrics (callable):
                Metrics to be applied on the validation set
        """
        self.dls = dls
        # if loss_function is None:
        #     loss_function = getattr(self.dls.train_ds, "loss_func", False)
        #     if not loss_function:
        #         raise ValueError("Could not infer loss function from the dataloaders, please pass in a loss function")
        self.model = model
        self.loss_function = loss_function
        self.opt_function = opt_function
        self.learning_rate = learning_rate
        self.callbacks = callbacks
        self.metrics = metrics

    def call_event(self, event: str):
        """
        Calls a callback `event` for all callbacks in `self.callbacks`
        
        Args:
            event (str):
                A valid `Callback` event
        """
        for callback in sorted(
            self.callbacks,
            key=lambda cb: cb.order, 
            reverse=True
        ):
            if isinstance(callback, type):
                callback = callback(self)
            callback(event)
